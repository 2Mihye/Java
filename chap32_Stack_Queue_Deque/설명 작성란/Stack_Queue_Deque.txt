스택(Stack)_큐(Queue)_덱(Deque)
	데이터를 저장하고 관리하는 자료구조
	각각의 데이터를 다양한 방식으로 저장하고 접근할 수 있도록 설계되어 있고, 다양한 알고리즘과 문제 해결에 사용된다.
	
스택(Stack)이란?
	데이터를 후입선출(LIFO Last-In-First-Out)의 원칙에 따라 저장하는 자료구조
	가장 최근에 삽입한 데이터가 가장 먼저 제거된다.
	push(item) : 스택에 데이터 추가
	pop() 	   : 스택의 맨 위(가장 최근)의 데이터를 제거하고 반환
	peek()	   : 스택의 맨 위(가장 최근)의 데이터를 반환
	
	stack 값 추가 : stack.push();
	stack 값 삭제 : stack.pop();
	stack 전체 값 제거, 초기화 : stack.clear();
	stack 가장 상단의 값 (가장 마지막에 넣은 값) 출력 : stack.peek();
	stack의 크기 출력 : stack.size();
	stack이 비어있는지 확인 : stack.empty(); -> 비어있으면 true, 하나라도 있으면 false
	stack에 1이 있는지 확인하고 1이 있다면 true : stack.contains(1);
	
ArrayList & Stack : 데이터를 저장하고 관리하는데 사용되는 자료구조
ArrayList : 동적배열로 구현된 자료구조로 크기가 동적으로 조절 가능하고 데이터를 순서대로 저장하고 중간 삽입 및 삭제 작업에도 효율적이다. 데이터를 추가하거나 제거할 때 일반적으로 예외X
Stack : 후입선출 순서를 따르고 임시로 데이터를 저장하고 간략하게 함수를 호출하고 복귀하는 식. 깊이우선탐색(DFS). pop연산을 빈스택에서 수행하려고 할 떄 예외가 발생!
Queue : (FIFO,First In First Out)

큐(Queue)란?
	데이터를 선입선출(FIFO,First-In-First-Out)의 원칙에 따라 저장하고 관리하는 자료구조
	데이터가 큐에 추가되면 가장 먼저 추가된 데이터가 가장 먼저 제거되는 방식
	item 추가 : queue.offer(item)
	요소 제거 반환 :  queue.poll();
	front요소 확인 반환(요소제거X) : queue.peek();
	크기 확인 : queue.size();
	
디큐(Dequeue, Double-Ended-Queue)란?
	양쪽 끝에서 요소를 추갛거나 제거할 수 있는 자료구조이고 인터페이스이기 때문에 LinkedList 나 ArrayDequeue를 사용해서 많이 쓴다.
	Deque Queue와 Stack의 기능을 모두 수행할 수 있다.
	
	addFirst(), offerFirst() : Dequeue 맨 앞에 요소를 추가
	addLast(), offerLast() : Dequeue 맨 뒤에 요소를 추가
	removeFirst(), pollFirst() : Dequeue  맨 앞에서 요소를 제거하고 반환
	removeLast(), pollLast() : Dequeue의 맨 뒤에서 요소를 제거하고 반환
	getFirst(), peekFirst() : Dequeue의 맨 앞 요소를 가져옴
	getLast(), peekLast() : Dequeue의 맨 뒤 요소를 가져옴

	예시)
	addFirst() : 만약 요소를 추가할 공간이 부족하거나 제약 조건에 어긋나는 경우 예외가 발생하고 반환값이 없다!
	offerFirst() : 요소를 추가하려고 할 때 예외를 발생시키지 않으며 요소추가가 성공하면 true, 요소추가가 실패하면 false를 반환한다.

	removeLast() : Dequeue가 비어있는 경우 예외가 발생시키므로 항상 요소를 반환한다.
	pollLast() : Dequeue가 비어있는 경우 null을 반환하고 예외처리를 하지 않고 사용할 수 있다.
	
	getFirst() : 비어있는 경우 예외가 발생시키고 요소를 가져올 떄 예외를 처리하고자 할 때 사용한다.
	peekFirst() : 비어있을 경우 null을 반환하고 예외를 처리하지 않고 가져오기가 실패할 경우 대비